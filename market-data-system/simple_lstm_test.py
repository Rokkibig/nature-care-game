#!/usr/bin/env python
"""
–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç LSTM –º–æ–¥–µ–ª—ñ –∑ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
"""

import numpy as np
import pandas as pd
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error
import warnings
warnings.filterwarnings('ignore')

print("="*50)
print("üöÄ –¢–ï–°–¢ ENHANCED LSTM (–ë–ï–ó TensorFlow)")
print("="*50)

# 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
print("\nüì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è BTC-USD...")
df = yf.download('BTC-USD', period='1y', progress=False)
print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(df)} –¥–Ω—ñ–≤")

# 2. –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
print("\nüìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤...")
df['MA_7'] = df['Close'].rolling(7).mean()
df['MA_30'] = df['Close'].rolling(30).mean()
df['Volume_MA'] = df['Volume'].rolling(10).mean()
df['Returns'] = df['Close'].pct_change()
df['Volatility'] = df['Returns'].rolling(20).std()

# RSI
delta = df['Close'].diff()
gain = delta.where(delta > 0, 0).rolling(14).mean()
loss = -delta.where(delta < 0, 0).rolling(14).mean()
df['RSI'] = 100 - (100 / (1 + gain/loss))

df = df.dropna()
print(f"‚úÖ –î–æ–¥–∞–Ω–æ {7} —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤")

# 3. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
features = ['Close', 'Volume', 'RSI', 'Returns', 'Volatility']
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df[features])

# 4. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è sequences
seq_length = 30
X, y = [], []
for i in range(seq_length, len(scaled_data)):
    X.append(scaled_data[i-seq_length:i])
    y.append(scaled_data[i, 0])

X, y = np.array(X), np.array(y)

# 5. Train/Test split
split = int(len(X) * 0.8)
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

print(f"\nüîß –î–∞–Ω—ñ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ:")
print(f"   Training:  {X_train.shape}")
print(f"   Testing:   {X_test.shape}")
print(f"   Features:  {len(features)}")

# 6. –ü—Ä–æ—Å—Ç–∞ –º–æ–¥–µ–ª—å (Linear Regression —è–∫ baseline)
from sklearn.linear_model import LinearRegression

print("\nüèóÔ∏è –ù–∞–≤—á–∞–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—ó –º–æ–¥–µ–ª—ñ (baseline)...")
# Flatten –¥–ª—è Linear Regression
X_train_flat = X_train.reshape(X_train.shape[0], -1)
X_test_flat = X_test.reshape(X_test.shape[0], -1)

model = LinearRegression()
model.fit(X_train_flat, y_train)

# –ü—Ä–æ–≥–Ω–æ–∑
y_pred = model.predict(X_test_flat)

# Inverse transform
y_test_real = y_test * (scaler.data_max_[0] - scaler.data_min_[0]) + scaler.data_min_[0]
y_pred_real = y_pred * (scaler.data_max_[0] - scaler.data_min_[0]) + scaler.data_min_[0]

# –ú–µ—Ç—Ä–∏–∫–∏
mae = mean_absolute_error(y_test_real, y_pred_real)
rmse = np.sqrt(np.mean((y_test_real - y_pred_real)**2))

print("\n" + "="*50)
print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò (Linear Regression baseline):")
print("="*50)
print(f"MAE:  ${mae:.2f}")
print(f"RMSE: ${rmse:.2f}")

# –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –±–∞–∑–æ–≤–æ—é –º–æ–¥–µ–ª–ª—é
base_mae = 109.84
improvement = ((base_mae - mae) / base_mae) * 100

if improvement > 0:
    print(f"\nüéâ –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è: {improvement:.1f}% vs —Å—Ç–∞—Ä–∞ –º–æ–¥–µ–ª—å!")
else:
    print(f"\nüìà –ë–∞–∑–æ–≤–∞ –º–æ–¥–µ–ª—å: MAE ${mae:.2f}")

# –û—Å—Ç–∞–Ω–Ω—ñ–π –ø—Ä–æ–≥–Ω–æ–∑
current_price = float(df['Close'].iloc[-1])
print(f"\n–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ BTC: ${current_price:,.2f}")

print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
print("\nüí° –î–ª—è —Å–ø—Ä–∞–≤–∂–Ω—å–æ—ó LSTM –º–æ–¥–µ–ª—ñ –ø–æ—Ç—Ä—ñ–±–µ–Ω TensorFlow")
print("   –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install tensorflow==2.13.0")
